<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>阿浩の博客</title>
  
  <subtitle>阿浩の博客</subtitle>
  <link href="http://www.ahao8.top/atom.xml" rel="self"/>
  
  <link href="http://www.ahao8.top/"/>
  <updated>2023-01-27T10:28:37.217Z</updated>
  <id>http://www.ahao8.top/</id>
  
  <author>
    <name>阿浩</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>列表查找</title>
    <link href="http://www.ahao8.top/posts/4c50.html"/>
    <id>http://www.ahao8.top/posts/4c50.html</id>
    <published>2023-01-27T10:26:14.947Z</published>
    <updated>2023-01-27T10:28:37.217Z</updated>
    
    <content type="html"><![CDATA[<h1>列表查找</h1><h2 id="查找">查找</h2><ul class="lvl-0"><li class="lvl-2"><p>查找：在一些数据元素中，通过一定的方法找出与给定关键字相同的数据元素的过程</p></li><li class="lvl-2"><p>列表查找（线性表查找）：从列表中查找指定元素</p><ul class="lvl-2"><li class="lvl-4">输入：列表、待查找元素</li><li class="lvl-4">输出：元素下标（未找到元素时一般返回None或-1）</li></ul></li><li class="lvl-2"><p>内置列表查找函数：index()</p></li></ul><h2 id="顺序查找-Linear-Search">顺序查找(Linear Search)</h2><ul class="lvl-0"><li class="lvl-2"><p>顺序查找：也叫线性查找，从列表第一个元素开始，顺序进行搜索，直到找到元素或搜索到列表最后一个元素为止</p></li><li class="lvl-2"><p>时间复杂度：O(n)</p></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">linear_search</span><span class="token punctuation">(</span>li<span class="token punctuation">,</span>val<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> ind <span class="token punctuation">,</span>v <span class="token keyword">in</span> emumerate<span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> v <span class="token operator">==</span> val<span class="token punctuation">:</span>            <span class="token keyword">return</span> ind        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">None</span><span class="token comment">#或者</span><span class="token keyword">def</span> <span class="token function">linear_search</span><span class="token punctuation">(</span>data_set<span class="token punctuation">,</span>value<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span>data_set<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> data_set<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> value<span class="token punctuation">:</span>            <span class="token keyword">return</span> i     <span class="token keyword">return</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二分查找-Binar-Search">二分查找(Binar Search)</h2><ul class="lvl-0"><li class="lvl-2"><p>二分查找：又叫折半查找，从有序列表的初始候选区 li[0:n] 开始，通过对待查找的值与候选区中间值的比较，可以使候选区减少一半</p></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">binary_search</span><span class="token punctuation">(</span>li<span class="token punctuation">,</span>val<span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token comment"># val：元素</span>    left <span class="token operator">=</span> <span class="token number">0</span>    right <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>    <span class="token keyword">while</span> left <span class="token operator">&lt;=</span> right<span class="token punctuation">:</span><span class="token comment"># 候选区有值</span>        mid <span class="token operator">=</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span><span class="token operator">//</span> <span class="token number">2</span>        <span class="token keyword">if</span> li<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> val<span class="token punctuation">:</span>            <span class="token keyword">return</span> mid        <span class="token keyword">elif</span> li<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&gt;</span> val<span class="token punctuation">:</span> <span class="token comment"># 带查找的值在mid左侧</span>            right <span class="token operator">=</span> mid <span class="token operator">-</span><span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>   <span class="token comment"># li[mid] &lt; val 带查找的值在mid右侧</span>            left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>      <span class="token keyword">else</span><span class="token punctuation">:</span>             <span class="token keyword">return</span> <span class="token boolean">None</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul class="lvl-0"><li class="lvl-2"><p>时间复杂度：O(logn)</p></li></ul><p><mark>测试运行时间代码</mark>：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">def</span> <span class="token function">cal_time</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        t1 <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>        result <span class="token operator">=</span> func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        t2 <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%s running time: %s secs."</span> <span class="token operator">%</span> <span class="token punctuation">(</span>func<span class="token punctuation">.</span>__name__<span class="token punctuation">,</span>t2<span class="token operator">-</span>t1<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> result    <span class="token keyword">return</span> wrapper<span class="token comment"># 运用时，先导入这个模块，再用@cal_time语句前后引用整个函数代码，如：</span><span class="token decorator annotation punctuation">@cal_time</span><span class="token keyword">def</span> <span class="token function">binary_search</span><span class="token punctuation">(</span>li<span class="token punctuation">,</span>val<span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token comment"># val：元素</span>    left <span class="token operator">=</span> <span class="token number">0</span>    right <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>    <span class="token keyword">while</span> left <span class="token operator">&lt;=</span> right<span class="token punctuation">:</span><span class="token comment"># 候选区有值</span>        mid <span class="token operator">=</span> <span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span><span class="token operator">//</span> <span class="token number">2</span>        <span class="token keyword">if</span> li<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">==</span> val<span class="token punctuation">:</span>            <span class="token keyword">return</span> midcal_time        <span class="token keyword">elif</span> li<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&gt;</span> val<span class="token punctuation">:</span> <span class="token comment"># 带查找的值在mid左侧</span>            right <span class="token operator">=</span> mid <span class="token operator">-</span><span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>   <span class="token comment"># li[mid] &lt; val 带查找的值在mid右侧</span>            left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>      <span class="token keyword">else</span><span class="token punctuation">:</span>             <span class="token keyword">return</span> <span class="token boolean">None</span><span class="token decorator annotation punctuation">@cal_time</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>注：内置函数 index() 用的是线性查找。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;列表查找&lt;/h1&gt;
&lt;h2 id=&quot;查找&quot;&gt;查找&lt;/h2&gt;
&lt;ul class=&quot;lvl-0&quot;&gt;
&lt;li class=&quot;lvl-2&quot;&gt;
&lt;p&gt;查找：在一些数据元素中，通过一定的方法找出与给定关键字相同的数据元素的过程&lt;/p&gt;
&lt;/li&gt;
&lt;li class=&quot;lvl-2&quot;</summary>
      
    
    
    
    <category term="数据结构" scheme="http://www.ahao8.top/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    
    <category term="python" scheme="http://www.ahao8.top/tags/python/"/>
    
    <category term="数据结构" scheme="http://www.ahao8.top/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>python数据类型</title>
    <link href="http://www.ahao8.top/posts/bb2d.html"/>
    <id>http://www.ahao8.top/posts/bb2d.html</id>
    <published>2023-01-24T09:44:31.957Z</published>
    <updated>2023-01-24T12:31:35.422Z</updated>
    
    <content type="html"><![CDATA[<h1>python数据类型</h1><h2 id="python数据类型概况">python数据类型概况</h2><p><strong>数字类型</strong></p><p><strong>字符类型</strong></p><p><strong>布尔类型</strong></p><p><strong>空类型</strong></p><p><strong>列表类型</strong></p><p><strong>元组类型</strong></p><p><strong>字典类型</strong></p><h3 id="整型int">整型int</h3><ul class="lvl-0"><li class="lvl-2"><p>整型就是所说的整数，0也是整数，但是特殊的整数</p></li><li class="lvl-2"><p><mark>int</mark>即是整型的代表，又是定义整型的<mark>内置函数</mark></p></li></ul><h3 id="浮点型">浮点型</h3><ul class="lvl-0"><li class="lvl-2"><p>浮点型就是我们生活中的小数，凡是带有小数点的类型，都可以认为是浮点型</p></li><li class="lvl-2"><p>在python中，<mark>float</mark>既是浮点型的代表，又是浮点型类型定义的内置函数</p></li><li class="lvl-2"><p>定义<mark>float</mark>类型的时候，并不需要一定使用<mark>float</mark>声明</p></li></ul><h3 id="内置函数–type">内置函数–type</h3><ul class="lvl-0"><li class="lvl-2"><p>返回变量的类型</p></li><li class="lvl-2"><p><mark>type</mark>（已经被赋值的变量名或变量）</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">count <span class="token operator">=</span> <span class="token number">1050</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span><span class="token number">3.1415926</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="字符串">字符串</h3><ul class="lvl-0"><li class="lvl-2"><p>用 " 或者 “” 包裹的信息，就是字符串</p></li><li class="lvl-2"><p>字符串中可以包含任意字符：如字母，数字，符号，且没有先后顺序</p></li></ul><h4 id="字符串的定义方法">字符串的定义方法</h4><p>在python中，使用<mark>str</mark>来代表字符串类型，并且通过该函数可以定义字符串</p><h4 id="字符串的重要思想">字符串的重要思想</h4><ul class="lvl-0"><li class="lvl-2"><p>字符串是不可改变的！</p></li></ul><h4 id="内置函数id">内置函数id</h4><ul class="lvl-0"><li class="lvl-2"><p>返回变量的内存地址</p></li><li class="lvl-2"><p>数字地址 = <mark>id</mark>(变量)</p></li></ul><h4 id="内置函数">内置函数</h4><ul class="lvl-0"><li class="lvl-2"><p>返回字符串的长度</p></li><li class="lvl-2"><p>无法返回数字类型的长度，因为数字类型没有长度</p></li><li class="lvl-2"><p>返回 = len(字符串)</p></li></ul><h4 id="内置成员运算符in的使用">内置成员运算符<mark>in</mark>的使用</h4><ul class="lvl-0"><li class="lvl-2"><p>成员运算符是用来判断你的数据中是否存在你想要的成员</p></li></ul><h4 id="内置函数max">内置函数<mark>max</mark></h4><ul class="lvl-0"><li class="lvl-2"><p><mark>max</mark>(数据) -&gt; 成员值     <code>print(max(''今天是1月3日!'))</code>    -&gt; <mark>月</mark></p></li><li class="lvl-2"><p><strong>规则</strong>：中文符号 &gt; 字母 &gt; 数字 &gt; 英文符号</p></li><li class="lvl-2"><p>中文按照拼音的首字母来计算</p></li></ul><h4 id="内置函数min">内置函数<mark>min</mark></h4><ul class="lvl-0"><li class="lvl-2"><p><mark>min</mark>函数返回数据中最小的成员  <code>pinrt(min('今天是1月3日!'))</code>  -&gt; !</p></li><li class="lvl-2"><p>min(数据) &gt; 字母 &gt; 数字 &gt; 英文符号</p></li><li class="lvl-2"><p><strong>规则</strong>：中文符号 &gt; 字母 &gt; 数字 &gt; 英文符号</p></li><li class="lvl-2"><p>中文按照拼音的首字母来计算</p></li></ul><h4 id="字符串的累加">字符串的累加</h4><ul class="lvl-0"><li class="lvl-2"><p>字符串不是数字不能做减法，乘除法</p></li><li class="lvl-2"><p>字符串的拼接，用 “+” 这个符号</p></li></ul><h3 id="布尔类型">布尔类型</h3><ul class="lvl-0"><li class="lvl-2"><p>定义：真假的判断 即 布尔类型</p></li><li class="lvl-2"><p>固定值：True -&gt; 真；False -&gt; 假；</p></li><li class="lvl-2"><p>布尔值</p></li></ul><h4 id="布尔类型的使用">布尔类型的使用</h4><ul class="lvl-0"><li class="lvl-2"><p><mark>bool</mark>代表布尔类型，也可以对于结果进行真假的判读</p></li></ul><h4 id="使用场景">使用场景</h4><ul class="lvl-0"><li class="lvl-2"><p>常被用来判断一件事儿的真假</p></li></ul><h4 id="数字与字符串的布尔应用">数字与字符串的布尔应用</h4><ul class="lvl-0"><li class="lvl-2"><p>int 0 -&gt; False，非0 -&gt; True</p></li><li class="lvl-2"><p>float 0.0 -&gt; False，非0.0 -&gt; True</p></li><li class="lvl-2"><p>str " -&gt; False(即 空字符串)，非空字符串 -&gt; True</p></li><li class="lvl-2"><p>在计算机中0 1是计算机的最原始形态，单个占空间也最小，故而经常会将0 1用来替代True与False</p></li></ul><h3 id="pyhton中的空类型">pyhton中的空类型</h3><ul class="lvl-0"><li class="lvl-2"><p>不属于任何数据类型就是<mark>空类型</mark></p></li><li class="lvl-2"><p>固定值：<mark>None</mark></p></li><li class="lvl-2"><p>空类型 属于 <mark>False</mark>的范畴</p></li><li class="lvl-2"><p>如果不确定类型的时候可以使用<mark>空类型</mark></p></li></ul><h3 id="列表类型">列表类型</h3><ul class="lvl-0"><li class="lvl-2"><p>列表就是队列</p></li><li class="lvl-3"><p>他是各种数据类型的集合，也是一种数据结构</p></li><li class="lvl-2"><p>列表是一种有序，且内容可重复的集合类型</p></li></ul><h4 id="列表的定义">列表的定义</h4><ul class="lvl-0"><li class="lvl-2"><p>在python中，<mark>list</mark>代表这种类型，也可以用它定义一个列表  <code>name_01=list(['',''])</code></p></li><li class="lvl-2"><p>在python中，列表中的元素存在于一个[]中  <code>name_02=['','']</code></p></li><li class="lvl-2"><p>在python中，列表是一个无限制长度的数据结构</p></li></ul><h4 id="列表中的类型">列表中的类型</h4><ul class="lvl-0"><li class="lvl-2"><p><strong>str_array</strong></p></li><li class="lvl-2"><p><strong>int_array</strong></p></li><li class="lvl-2"><p><strong>float_array</strong></p></li><li class="lvl-2"><p><strong>bool_array</strong></p></li><li class="lvl-2"><p><strong>list_array</strong>  列表中嵌套列表</p></li><li class="lvl-2"><p><strong>min_array</strong>  列表中可以放混合类型</p></li></ul><h4 id="in，max，min在列表中的使用">in，max，min在列表中的使用</h4><ul class="lvl-0"><li class="lvl-2"><p>1 in [1,2,3,4] -&gt; True; 10 in  [1,2,3,4] -&gt; False</p></li><li class="lvl-2"><p>max([1,2,3,4]) -&gt; 4</p></li><li class="lvl-2"><p>min([1,2,3,4]) -&gt; 1</p></li><li class="lvl-2"><p>max和min在列表中使用的时候，列表中的元素不能是多种类型，如果类型不统一，则会报错</p></li></ul><h3 id="元组">元组</h3><ul class="lvl-0"><li class="lvl-2"><p>元组和列表一样，都是一种可以存储多种数据结构的队列</p></li><li class="lvl-2"><p>元组也是一个有序的，且元素可以重复的集合</p></li></ul><h4 id="元组的定义">元组的定义</h4><ul class="lvl-0"><li class="lvl-2"><p>在python中，tuple代表着元组这种类型，也可以用它定义一个元组   <code>name_01=tuple('','')</code></p></li><li class="lvl-2"><p>在python中，元组中的元素存在于一个（）小括号中  <code>name_02=('','')</code></p></li><li class="lvl-2"><p>在python中，元组是一个无限制长度的数据结构</p></li></ul><blockquote><p>注：如果元组中只有一个元素，那一定要在这个元素后面加上一个逗号</p></blockquote><h4 id="列表与元组的区别">列表与元组的区别</h4><ul class="lvl-0"><li class="lvl-2"><p>元组比列表占用资源更小</p></li><li class="lvl-2"><p>列表是可变的，元组是不可变的</p></li></ul><h4 id="元组中的类型">元组中的类型</h4><ul class="lvl-0"><li class="lvl-2"><p><strong>str_tuple</strong></p></li><li class="lvl-2"><p><strong>int_tuple</strong></p></li><li class="lvl-2"><p><strong>float_tuple</strong></p></li><li class="lvl-2"><p><strong>bool_tuple</strong></p></li><li class="lvl-2"><p><strong>none_tuple</strong>=(None,None,None)</p></li><li class="lvl-2"><p><strong>tuple_tuple</strong>=((1,2,3),(1.2,3.1))</p></li><li class="lvl-2"><p><strong>list_type</strong>=([123,456],[6789,1234])</p></li><li class="lvl-2"><p><strong>mix_tuple</strong>=(‘’,1,3.14,None,True)</p></li><li class="lvl-2"><p><strong>tuple_array</strong>=[(‘a’,‘b’),(‘c’,‘d’),(‘e’,)]</p></li></ul><h4 id="in，max，min在元组中的使用">in，max，min在元组中的使用</h4><ul class="lvl-0"><li class="lvl-2"><p>1 in （1，2，3，4） -&gt; True；10 not in （1，2，3，4） -&gt; True</p></li><li class="lvl-2"><p>max((1,2,3,4)) -&gt; 4</p></li><li class="lvl-2"><p>min((1,2,3,4)) -&gt; 1</p></li><li class="lvl-2"><p>max和min在元组中使用的时候，元组中的元素不能是多种类型，如果类型不统一，则会报错</p></li></ul><h3 id="字典类型">字典类型</h3><ul class="lvl-0"><li class="lvl-2"><p>字典是由多个键（key）及其对应的值（value）所组成的一种数据类型</p></li></ul><h4 id="字典的结构与创建方法">字典的结构与创建方法</h4><ul class="lvl-0"><li class="lvl-2"><p>在python中，<mark>dict</mark>用来代表字典，并且可以创建一个字典</p></li><li class="lvl-2"><p>在python中，通过{}将一个个key与value存入字典中</p><p><code>a = dict()</code></p><p><code>a = {}</code></p><p><code>person = {'name':'xiaoming','age':33}</code></p></li></ul><h4 id="字典支持的数据类型">字典支持的数据类型</h4><ul class="lvl-0"><li class="lvl-2"><p>key支持字符串，数字和元组类型，但列表是不支持的</p></li><li class="lvl-2"><p>value支持所有python的数据类型</p><p><code>a = {'name':'dewei','age':30}</code></p><p><code>b = {1:'one',2:'two'}</code></p><p><code>c = {(1,2,3):[1,2,3],(4,5,6):[4,5,6]}</code></p></li></ul><h4 id="列表与元组中的字典">列表与元组中的字典</h4><ul class="lvl-0"><li class="lvl-2"><p>dict_array = [{1:1,2:2},{‘one’:1,‘two’:2}]</p></li><li class="lvl-2"><p>dict_tuple = ({1:1,2:2},{‘one’:1,"two’:2})</p></li><li class="lvl-2"><p><mark>元组一旦创建，就不可以改变</mark></p></li></ul><h4 id="python3-7与之前版本-字典的区别">python3.7与之前版本 字典的区别</h4><ul class="lvl-0"><li class="lvl-2"><p>python3.7之前是无序的</p></li><li class="lvl-2"><p>python3.7之后是有序的</p></li></ul><h4 id="字典的重要特性">字典的重要特性</h4><ul class="lvl-0"><li class="lvl-2"><p>字典中每一个key一定是唯一的</p></li></ul><h3 id="数字的运算">数字的运算</h3><h4 id="赋值运算符">赋值运算符</h4><table><thead><tr><th>运算符</th><th>描述</th><th>举例</th></tr></thead><tbody><tr><td>=</td><td>等于运算符</td><td>c=a+b</td></tr><tr><td>+=</td><td>加法运算符</td><td>c+=a -&gt; c=c+a</td></tr><tr><td>-=</td><td>减法运算符</td><td>c-=a -&gt; c=c-a</td></tr><tr><td>*=</td><td>乘法运算符</td><td>c*=a  -&gt;  c=c * a</td></tr><tr><td>/=</td><td>除法运算符</td><td>c/=a -&gt; c=c/a</td></tr><tr><td>%=</td><td>取模运算符</td><td>c%=a -&gt; c=c%a</td></tr><tr><td>**=</td><td>幂运算符</td><td>c ** =a -&gt; c=c ** a</td></tr><tr><td>//=</td><td>整除运算符</td><td>c//=a -&gt; c=c//a</td></tr></tbody></table><h4 id="b-kb-mb-gb-的转换">b kb mb gb 的转换</h4><ul class="lvl-0"><li class="lvl-2"><p>b kb mb gb 是计算机的计量单位</p></li><li class="lvl-2"><p>1024相差量</p></li></ul><h4 id="字符串与数字的乘法">字符串与数字的乘法</h4><ul class="lvl-0"><li class="lvl-2"><p>字符串无法与字符串做乘法</p></li><li class="lvl-2"><p>字符串只可以和数字作乘法</p></li></ul><h3 id="比较运算符">比较运算符</h3><table><thead><tr><th>运算符</th><th>描述</th><th>举例</th></tr></thead><tbody><tr><td>==</td><td>判断是否等于</td><td>a==b</td></tr><tr><td>!=</td><td>判断是否不等于</td><td>a!=b</td></tr><tr><td>&gt;</td><td>判断是否大于</td><td>a&gt;b</td></tr><tr><td>&lt;</td><td>判断是否小于</td><td>a&lt;b</td></tr><tr><td>&gt;=</td><td>判断是否大于等于</td><td>a&gt;=b</td></tr><tr><td>&lt;=</td><td>判断是否小于等于</td><td>a&lt;=b</td></tr><tr><td><mark>&lt;&gt;</mark></td><td><mark>判断是否不等于</mark></td><td>a&lt;&gt;b</td></tr><tr><td>is</td><td>判断两个对象存储单元是否相同</td><td>a is b</td></tr><tr><td>is not</td><td>判断两个对象存储单元是否不同</td><td>a is not b</td></tr></tbody></table><blockquote><p>注：&lt;&gt;在python3里已经废弃，仅python2里可用</p><p>​       <mark>单元存储</mark> 就是我们提过的<mark>内存块</mark></p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;python数据类型&lt;/h1&gt;
&lt;h2 id=&quot;python数据类型概况&quot;&gt;python数据类型概况&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;数字类型&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;字符类型&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;布尔类型&lt;/stron</summary>
      
    
    
    
    <category term="python" scheme="http://www.ahao8.top/categories/python/"/>
    
    
    <category term="python" scheme="http://www.ahao8.top/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>我的第一篇博客文章</title>
    <link href="http://www.ahao8.top/posts/3eeb.html"/>
    <id>http://www.ahao8.top/posts/3eeb.html</id>
    <published>2023-01-21T05:21:05.453Z</published>
    <updated>2023-01-22T16:26:41.406Z</updated>
    
    <content type="html"><![CDATA[<h1>我的第一篇博客文章</h1><h2 id="谈谈博客对我的影响">谈谈博客对我的影响</h2><p>本人是一名在读大三的学生，这是我写的第一篇博客文章，经过一番折腾后，虽然中间有点小插曲，但是我还是顺利地完成好搭建这个属于我个人的博客，作为一名长期以自学为主的人来说，我的知识的积累和技术的成长很大程度都离不开博客，先是因为学校无法提供偏技术这方面的培养，我便开始了一段独立且漫长的自学历程，由于我是web安全为主要方向学习，在我个人自学和结合靶场训练的过程，遇到问题也常有的事情，很多时候就去网上查资料学习，这时候我一般去阅读别人的博客文章，看别人是怎么解决问题，思路是怎么样的，涉及那些具体的知识点，我都比较地阅读。慢慢地，就会有一定的知识的积累和对问题解决的方法，当然，像技能的提升种肯定是离不开稳扎稳打的训练。我非常感谢别人的对自己个人知识和技术的分享，以及一些问题的解决，写成博客文章，供大家学习，这种分享的精神，我觉得是非常宝贵和伟大的，想必大多数计算机相关的学习者和我都一样，博客对我们的知识的积累和技术的成长有一定的影响的。</p><h2 id="希望自己也能成为影响他人的人">希望自己也能成为影响他人的人</h2><p>由于自己在学习的过程中有经常记笔记的习惯，并且积累了一定个人自学笔记，我也希望自己写出一些博客文章，供大家作学习参考，这是我个人搭建博客的想法和初衷，如果你觉得我的博客文章写得不错，或者某部分细节能解决你手上棘手的问题的话，你也可以关注一下我的博客，我会尽个人所能写好每一篇博客文章，原创不易，也非常期待你的小赏喔。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;我的第一篇博客文章&lt;/h1&gt;
&lt;h2 id=&quot;谈谈博客对我的影响&quot;&gt;谈谈博客对我的影响&lt;/h2&gt;
&lt;p&gt;本人是一名在读大三的学生，这是我写的第一篇博客文章，经过一番折腾后，虽然中间有点小插曲，但是我还是顺利地完成好搭建这个属于我个人的博客，作为一名长期以自学为主的人来说，</summary>
      
    
    
    
    <category term="日常" scheme="http://www.ahao8.top/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
    <category term="日常" scheme="http://www.ahao8.top/tags/%E6%97%A5%E5%B8%B8/"/>
    
    <category term="博客" scheme="http://www.ahao8.top/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
</feed>
